{"name":"Toggle","tagline":"A library to add Feature-Toggle capability to your android app","body":"##A simple android library to add Feature-Toggle capability in your app \r\n\r\n###Philosophy\r\n\r\nA feature toggle, is a technique in software development that helps alter the state of a feature in an application dynamically. For more information, please check [this link.](https://en.wikipedia.org/wiki/Feature_toggle)\r\n\r\n###Example\r\nSo say, you'd like to disable features like video (or analytics) for a certain group of users (based on api levels and devices) and enable them for the rest, you would need to do the following\r\n\r\n####Step 1: Create a configuration file in the following json format and host it somewhere (on your server, S3, etc.) \r\n```javascript\r\n{\"name\": \"myapp\", \"features\":\r\n\t[\r\n\t    {\"name\":\"video\", \"default\": \"enabled\", \"rules\":[\r\n\t    \t{\"state\": \"disabled\", \"value\": \r\n\t    \t\t{\"apilevel_min\": 21, \"apilevel_max\": 23, \"device\":[{\"manufacturer\":\"xiaomi\",\"model\":\"mi3\"}, {\"manufacturer\":\"samsung\", \"model\":\"s4\"}]}\r\n\t\t}, \r\n\t    \t{\"state\": \"disabled\", \"value\": {\"appversion_max\": 13}}\r\n\t    ]},\r\n\t    {\"name\":\"crash_reporting\", \"rules\":[\r\n\t    \t   \t{\"state\": \"disabled\", \"value\": \r\n\t    \t   \t\t{\"appversion\": 11, \"buildtype\": \"false\"}\r\n\t    \t   \t}\r\n\t    \t]\r\n\t    },\r\n\t    {\"name\":\"mixpanel\",\"default\": \"enabled\", \"rules\":[\r\n\t    \t{\"state\": \"disabled\", \"value\": \r\n\t    \t\t{\"device\":[{\"model\":\"Google Nexus 5 - 5.1.0 - API 22 - 1080x1920\"}, {\"manufacturer\":\"samsung\", \"model\":\"s4\"}]}\r\n\t\t}\r\n\t    ]}\r\n\t]\r\n}\r\n```\r\n\r\nThis configuration file allows you to:\r\n- disable the 'video' feature when all of the following get satisfied: \r\n     - api level between 21 and 23\r\n     - the device type is either a xiaomi mi3 or a samsung s4\r\n- disable the 'video' feature if the app version is less than 13\r\n- enable the 'video' feature otherwise (default: enabled)\r\n- disable the 'mixpanel' feature if the device is a google nexus 5 or a samsung s4\r\n- enable the 'mixpanel' feature otherwise (default: enabled)\r\n\r\nYou can find more information on the configuration parameters and how they work in the wiki [here](https://github.com/s0h4m/toggle/wiki). \r\n\r\n####Step 2: Download a new configuration\r\nYou can download a new configuration in any of the following ways:\r\n\r\n- By passing a url\r\n```java\r\nToggle.with(context).setConfig(myUrl);\r\n```\r\n\r\n- Downloading the config manually and then pass the same to Toggle as a String (in the Config JSON format)\r\n```java\r\nString configInJson = ... // my custom code for downloading the config from my server and retrieving it as a json\r\nToggle.with(context).setConfig(configInJson);\r\n```\r\n- Downloading the config manually and then pass the same to Toggle as a Config object\r\n```java\r\nConfig config = ... // my custom call (say Retrofit for example) for retrieving the Config object from my server\r\nToggle.with(context).setConfig(config);\r\n```\r\n\r\nOnce setConfig is called (in any form) the config is then cached locally, so you can always check for a feature later\r\n\r\n\r\n####Step 3: Check for the state of a feature at any time (even if you are offline)\r\nYou can check for a feature using the check method\r\n```java\r\nToggle.with(context).check(\"custom_network_component\").defaultState(Toggle.ENABLED).start(new cc.soham.toggle.callbacks.Callback() {\r\n            @Override\r\n            public void onStatusChecked(CheckResponse checkResponse) {\r\n                updateUiAfterResponse(checkResponse.featureName, checkResponse.state, checkResponse.featureMetaData, checkResponse.ruleMetadata, checkResponse.cached);\r\n            }\r\n        });\r\n```\r\n\r\nIn case you used a URL in setConfig, you can also use the getLatest flag to get the latest config before making the callback\r\n```java\r\nToggle.with(context).check(\"custom_network_component\").getLatest().defaultState(Toggle.ENABLED).start(new cc.soham.toggle.callbacks.Callback() {\r\n            @Override\r\n            public void onStatusChecked(CheckResponse checkResponse) {\r\n                updateUiAfterResponse(checkResponse.featureName, checkResponse.state, checkResponse.featureMetaData, checkResponse.ruleMetadata, checkResponse.cached);\r\n            }\r\n        });\r\n```\r\n\r\nThe state of the feature can be found in checkResponse.state along with other things present in the config like metadata\r\n\r\n###Other resources\r\nYou can find out more about Toggle in our [wiki](https://github.com/s0h4m/toggle/wiki).  \r\n        \r\n###Download\r\n\r\nGet this via Gradle:\r\n```groovy\r\ncompile 'cc.soham:toggle:0.1'\r\n```\r\nor Maven:\r\n```xml\r\n<dependency>\r\n  <groupId>cc.soham</groupId>\r\n  <artifactId>toggle</artifactId>\r\n  <version>0.1</version>\r\n</dependency>\r\n```\r\n\r\n\r\n###ProGuard\r\n\r\nIf you are using ProGuard you might need to add the following option:\r\n```\r\n-dontwarn cc.soham.toggle.**\r\n```\r\n\r\n\r\n###License\r\n\r\n    Copyright 2016 Soham Mondal\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.        ","google":"UA-12231679-2","note":"Don't delete this file! It's used internally to help with page regeneration."}